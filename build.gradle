import jakarta.mail.MessagingException
import jakarta.mail.internet.InternetAddress
import jakarta.mail.internet.MimeMessage

plugins {
    id 'java'
    id 'jacoco'
    id 'com.github.spacialcircumstances.gradle-cucumber-reporting' version '0.1.25'
    id 'org.sonarqube' version '4.4.0.3356'
    id 'maven-publish'
    id 'io.github.oleksiiparf.slack-webhook' version '1.0.0'
    id 'de.zebrajaeger.sendMail' version '0.2.2'
}

group = 'com.example'
version = '1.0'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'io.cucumber:cucumber-java:6.0.0'
    testImplementation 'io.cucumber:cucumber-junit:6.0.0'
    testImplementation 'junit:junit:4.12'
    implementation 'org.aspectj:aspectjrt:1.9.21.1'
    implementation 'jakarta.mail:jakarta.mail-api:2.0.1'
    implementation 'com.sun.mail:jakarta.mail:2.0.1'
}

cucumberReports {
    outputDir = file('build/reports/cucumber')
    buildId = '0'
    reports = files('reports/example-report.json')
}

test {
    finalizedBy 'jacocoTestReport', 'sonar'
}

publishing {
    repositories {
        maven {
            url 'https://mymavenrepo.com/repo/wfeEoJVTqyCrSb3fpohC/'
            credentials {
                username = System.getenv('MYMAVENREPO_USER')
                password = System.getenv('MYMAVENREPO_PASS')
            }
        }
    }
    publications {
        maven(MavenPublication) {
            from components.java
        }
    }
}

slack {
    buildSuccessful {
        webHook = System.getenv('SLACK_WEBHOOK_URL')
        attachment {
            fallback = 'Project successfully built.'
            pretext = 'Project successfully built.'
            field {
                title = 'Module'
                value = project.name
                shortValue = true
            }
            field {
                title = 'Version'
                value = project.version
                shortValue = true
            }
        }
    }
}

task sendMailCustom {
    doLast {
        def smtpHost = 'smtp.gmail.com'
        def smtpPort = 587
        def username = System.getenv('SMTP_USERNAME')
        def password = System.getenv('SMTP_PASSWORD')
        def fromEmail = 'lo_kaba@esi.dz'
        def toEmail = 'lr_soltani@esi.dz'
        def emailSubject = 'Notification Mail'
        def emailBody = 'Hello!! this is the last update.'

        Properties props = new Properties()
        props.put('mail.smtp.auth', 'true')
        props.put('mail.smtp.starttls.enable', 'true')
        props.put('mail.smtp.host', smtpHost)
        props.put('mail.smtp.port', smtpPort)

        Session session = Session.getInstance(props, new Authenticator() {
            @Override
            protected PasswordAuthentication getPasswordAuthentication() {
                return new PasswordAuthentication(username, password)
            }
        })

        try {
            MimeMessage message = new MimeMessage(session)
            message.setFrom(new InternetAddress(fromEmail))
            message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(toEmail))
            message.setSubject(emailSubject)
            message.setText(emailBody)
            Transport.send(message)
            println("Email sent successfully to: $toEmail")
        } catch (MessagingException e) {
            e.printStackTrace()
            println("Failed to send email: ${e.message}")
        }
    }
}
