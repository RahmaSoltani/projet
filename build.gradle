plugins {
    id 'java'
    id("jacoco")
    id("com.github.spacialcircumstances.gradle-cucumber-reporting") version "0.1.25"
    id("org.sonarqube") version "4.4.0.3356"
    id ("maven-publish")
    id("io.github.oleksiiparf.slack-webhook") version "1.0.0"
    id("de.zebrajaeger.sendMail") version "0.2.2"
}

group = 'com.example'
version = '1.0'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'io.cucumber:cucumber-java:6.0.0'
    testImplementation 'io.cucumber:cucumber-junit:6.0.0'
    testImplementation 'junit:junit:4.12'
    implementation "org.aspectj:aspectjrt:1.9.21.1"
    implementation 'jakarta.mail:jakarta.mail-api:2.0.1'
    implementation 'com.sun.mail:jakarta.mail:2.0.1'
}

cucumberReports {
    outputDir = file('build/reports/cucumber')
    buildId = '0'
    reports = files('reports/example-report.json')
}

test {
    finalizedBy "jacocoTestReport", 'sonar'
}

// Publishing to Maven Repository
publishing {
    repositories {
        maven {
            url 'https://mymavenrepo.com/repo/wfeEoJVTqyCrSb3fpohC/'
            credentials {
                username 'myMavenRepo'
                password '12345678'
            }
        }
    }

    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

slack {
    publishedPlugin {
        webHook = "https://hooks.slack.com/services/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"
        attachment {
            fallback = "New version successfully published."
            pretext = "New version successfully published."
            color = "good"
            field {
                title = "Module"
                value = project.name
                shortValue = true
            }
            field {
                title = "Version"
                value = project.version
                shortValue = true
            }
        }
    }

    buildSuccessful {
        webHook = "https://hooks.slack.com/services/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"
        attachment {
            fallback = "Project successfully built."
            pretext = "Project successfully built."
            field {
                title = "Module"
                value = project.name
                shortValue = true
            }
            field {
                title = "Version"
                value = project.version
                shortValue = true
            }
        }
    }
}

task sendMailCustom {
    doLast {
        // SMTP configuration...
    }
}

// Rename the postPublishedPluginToSlack task to a unique name
task sendSlackNotification {
    doLast {
        // Slack webhook URL
        def slackWebhookUrl = "https://hooks.slack.com/services/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"

        // Prepare the Slack message payload
        def payload = """{
            "text": "New version successfully published!",
            "attachments": [
                {
                    "fallback": "New version successfully published.",
                    "pretext": "New version successfully published.",
                    "color": "good",
                    "fields": [
                        {
                            "title": "Module",
                            "value": "${project.name}",
                            "short": true
                        },
                        {
                            "title": "Version",
                            "value": "${project.version}",
                            "short": true
                        }
                    ]
                }
            ]
        }"""

        // Send the HTTP request to Slack
        def url = new URL(slackWebhookUrl)
        def connection = url.openConnection()
        connection.setRequestMethod('POST')
        connection.setRequestProperty('Content-Type', 'application/json')
        connection.setDoOutput(true)
        connection.getOutputStream().write(payload.getBytes("UTF-8"))

        // Get the response from Slack
        def responseCode = connection.getResponseCode()
        if (responseCode == 200) {
            println("Slack notification sent successfully!")
        } else {
            println("Failed to send Slack notification. Response code: $responseCode")
        }
    }
}

// Correcting the execution order of tasks
publish {
    finalizedBy 'sendSlackNotification'
}

tasks.named('publish').configure {
    finalizedBy 'sendMailCustom'
}
